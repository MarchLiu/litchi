{"version":3,"file":"lib_index_js.ca153a7eac45c8af3c35.js","mappings":";;;;;;;;;;;;;;;;;;AAAA,2BAA2B;AACqC;AASzD,MAAM,OAAO;IAIlB,YAAY,IAAY,EAAE,OAAe;QACvC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAoC;QACvD,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAU,CAAC,QAAQ,EAAE,CAAC;QAC5D,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;CACF;AAED,MAAM,WAAW;IAKf,YAAY,KAAa,EAAE,QAAmB,EAAE,SAAkB,KAAK;QACrE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;CACF;AAEM,KAAK,UAAU,IAAI,CACxB,GAAW,EACX,GAAuB,EACvB,OAAkB,EAClB,OAAgB,EAChB,KAAa;IAEb,IAAI;QACF,MAAM,QAAQ,GAAG,CAAC,GAAG,OAAO,EAAE,OAAO,CAAC,CAAC;QACvC,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;QAEpC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;YAC5B,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SAC9B,CAAC,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;YAC9B,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;aAAM,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;YACrC,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAmB,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAClE,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;aAChB;SACF;KACF;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;QACzD,MAAM,IAAI,KAAK,CACb,4HAA4H,CAC7H,CAAC;KACH;IACD,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACrC,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;AAC5C,CAAC;AAEM,KAAK,UAAU,UAAU,CAAC,GAAW,EAAE,GAAuB;IACnE,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;IACpC,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;YAChC,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;QACH,OAAO,QAAQ;aACZ,IAAI,EAAE;aACN,IAAI,CAAC,IAAI,CAAC,EAAE;YACX,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;gBAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;aACtD;iBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;gBAClC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAc,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;aAChD;iBAAM;gBACL,OAAO,CAAC,KAAK,CAAC,eAAe,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC9D,MAAM,IAAI,KAAK,CACb,4BAA4B,GAAG,0EAA0E,CAC1G,CAAC;aACH;QACH,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,CAAC,EAAE;YACT,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CACb,oBAAoB,GAAG,iFAAiF,CACzG,CAAC;QACJ,CAAC,CAAC,CAAC;KACN;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CACb,oBAAoB,GAAG,iFAAiF,CACzG,CAAC;KACH;AACH,CAAC;AAED,SAAS,cAAc,CAAC,GAAuB;IAC7C,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC;QAC1B,cAAc,EAAE,kBAAkB;QAClC,MAAM,EAAE,kBAAkB;KAC3B,CAAC,CAAC;IACH,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;QACvC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;KACnC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAEM,KAAK,UAAU,KAAK,CAAC,OAAe;IACzC,OAAO,sEAAgB,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,wDAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AAClE,CAAC;;;;;;;;;;;;;;;;;;AC3HM,MAAM,SAAS,GAAG,+BAA+B,CAAC;AAElD,IAAU,UAAU,CAW1B;AAXD,WAAiB,UAAU;IACZ,eAAI,GAAG,aAAa,CAAC;IACrB,qBAAU,GAAG,mBAAmB,CAAC;IACjC,qBAAU,GAAG,mBAAmB,CAAC;IACjC,mBAAQ,GAAG,iBAAiB,CAAC;IAC7B,qBAAU,GAAG,mBAAmB,CAAC;IACjC,sBAAW,GAAG,0BAA0B,CAAC;IACzC,4BAAiB,GAAG,0BAA0B,CAAC;IAC/C,qBAAU,GAAG,mBAAmB,CAAC;IACjC,oBAAS,GAAG,kBAAkB,CAAC;IAC/B,oBAAS,GAAG,kBAAkB,CAAC;AAC9C,CAAC,EAXgB,UAAU,KAAV,UAAU,QAW1B;AAEM,MAAM,mBAAmB,GAAG,qBAAqB,CAAC;AAClD,MAAM,sBAAsB,GAAG,wBAAwB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AChBX;AAE7C,MAAM,UAAU,GAAG,IAAI,8DAAO,CAAC;IACpC,IAAI,EAAE,aAAa;IACnB,MAAM,EACJ,+FAA+F;QAC/F,kEAAkE;QAClE,sEAAsE;QACtE,qDAAqD;QACrD,sDAAsD;QACtD,sDAAsD;QACtD,uDAAuD;QACvD,oFAAoF;QACpF,QAAQ;CACX,CAAC,CAAC;AAEI,MAAM,MAAM,GAAG,IAAI,8DAAO,CAAC;IAChC,IAAI,EAAE,WAAW;IACjB,MAAM,EACJ,qEAAqE;QACrE,oFAAoF;QACpF,QAAQ;CACX,CAAC,CAAC;AACI,MAAM,MAAM,GAAG,IAAI,8DAAO,CAAC;IAChC,IAAI,EAAE,WAAW;IACjB,MAAM,EACJ,qEAAqE;QACrE,oFAAoF;QACpF,QAAQ;CACX,CAAC,CAAC;AACI,MAAM,MAAM,GAAG,IAAI,8DAAO,CAAC;IAChC,IAAI,EAAE,WAAW;IACjB,MAAM,EACJ,qEAAqE;QACrE,oFAAoF;QACpF,QAAQ;CACX,CAAC,CAAC;AACI,MAAM,MAAM,GAAG,IAAI,8DAAO,CAAC;IAChC,IAAI,EAAE,WAAW;IACjB,MAAM,EACJ,qEAAqE;QACrE,oFAAoF;QACpF,QAAQ;CACX,CAAC,CAAC;AAEI,MAAM,MAAM,GAAG,IAAI,8DAAO,CAAC;IAChC,IAAI,EAAE,WAAW;IACjB,MAAM,EACJ,qEAAqE;QACrE,oFAAoF;QACpF,QAAQ;CACX,CAAC,CAAC;AAEI,MAAM,MAAM,GAAG,IAAI,8DAAO,CAAC;IAChC,IAAI,EAAE,WAAW;IACjB,MAAM,EACJ,qEAAqE;QACrE,oFAAoF;QACpF,QAAQ;CACX,CAAC,CAAC;AAEH,SAAS,qBAAqB,CAAC,KAAa;IAC1C,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO,KAAK,CAAC;KACd;IACD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;KACtC;IACD,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;AACtE,CAAC;AAED,SAAS,uBAAuB,CAAC,WAAmB;IAClD,MAAM,oBAAoB,GAA8B;QACtD,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,IAAI;QACb,MAAM,EAAE,IAAI;QACZ,MAAM,EAAE,IAAI;KACb,CAAC;IAEF,OAAO,CACL,oBAAoB,CAAC,WAAW,CAAC,IAAI,qBAAqB,CAAC,WAAW,CAAC,CACxE,CAAC;AACJ,CAAC;AAEM,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAE,EAAE;IACvC,MAAM,IAAI,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAC;IAC3C,OAAO,IAAI,8DAAO,CAAC;QACjB,IAAI,EAAE,UAAU,IAAI,EAAE;QACtB,MAAM,EACJ,qEAAqE;YACrE,0EAA0E,IAAI,WAAW;YACzF,QAAQ;KACX,CAAC,CAAC;AACL,CAAC,CAAC;AAEK,MAAM,YAAY,GAAG,IAAI,8DAAO,CAAC;IACtC,IAAI,EAAE,kBAAkB;IACxB,MAAM,EACJ,qEAAqE;QACrE,oFAAoF;QACpF,QAAQ;CACX,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjG4E;AAChC;AACQ;AACD;AACY;AACH;AACnB;AAEZ;AACsB;AAEmB;AACP;AAC5B;AAC+D;AACnD;AAET;AAEzC;;GAEG;AACH,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,iDAAS;IACb,WAAW,EAAE,sCAAsC;IACnD,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,QAAQ;IAClB,QAAQ,EAAE,CAAC,4EAAqB,CAAC;IACjC,QAAQ,EAAE;QACR,iEAAe;QACf,kEAAgB;QAChB,yEAAgB;QAChB,wEAAsB;QACtB,gEAAW;QACX,yDAAQ;KACT;CACF,CAAC;AAEK,KAAK,UAAU,QAAQ,CAC5B,GAAoB,EACpB,OAAwB,EACxB,OAAyB,EACzB,eAAiC,EACjC,eAAuC,EACvC,UAAuB,EACvB,KAAe,EACf,oBAAkD;IAElD,MAAM,KAAK,GAAG,IAAI,yCAAK,CAAC,eAAe,CAAC,CAAC;IAEzC,MAAM,MAAM,GAAG,IAAI,qDAAe,CAChC,iDAAS,EACT,GAAG,EACH,eAAe,EACf,KAAK,EACL,KAAK,CACN,CAAC;IAEF,GAAG,CAAC,WAAW,CAAC,kBAAkB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAEvD,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,IAAI,EAAE;QACvC,KAAK,EAAE,aAAa;QACpB,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,MAAM,YAAY,CAAC,GAAG,EAAE,eAAe,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAC1E,CAAC;QACD,IAAI,EAAE,2CAAM;QACZ,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI;KAC5B,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,kDAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAE1E,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,UAAU,EAAE;QAC7C,KAAK,EAAE,wBAAwB;QAC/B,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,MAAM,YAAY,CAChB,GAAG,EACH,eAAe,EACf,OAAO,EACP,KAAK,EACL,KAAK,EACL,YAAY,CACb,CAAC;QACJ,CAAC;QACD,IAAI,EAAE,2CAAM;QACZ,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI;KAC5B,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,UAAU;QAC9B,QAAQ,EAAE,gBAAgB;KAC3B,CAAC,CAAC;IAEH,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,UAAU,EAAE;QAC7C,KAAK,EAAE,wBAAwB;QAC/B,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,MAAM,YAAY,CAChB,GAAG,EACH,eAAe,EACf,OAAO,EACP,KAAK,EACL,KAAK,EACL,YAAY,CACb,CAAC;QACJ,CAAC;QACD,IAAI,EAAE,2CAAM;QACZ,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI;KAC5B,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,UAAU;QAC9B,QAAQ,EAAE,gBAAgB;KAC3B,CAAC,CAAC;IAEH,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,QAAQ,EAAE;QAC3C,KAAK,EAAE,sBAAsB;QAC7B,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,MAAM,YAAY,CAChB,GAAG,EACH,eAAe,EACf,OAAO,EACP,KAAK,EACL,KAAK,EACL,UAAU,CACX,CAAC;QACJ,CAAC;QACD,IAAI,EAAE,2CAAM;QACZ,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI;KAC5B,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,QAAQ;QAC5B,QAAQ,EAAE,gBAAgB;KAC3B,CAAC,CAAC;IAEH,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,UAAU,EAAE;QAC7C,KAAK,EAAE,wBAAwB;QAC/B,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,MAAM,YAAY,CAChB,GAAG,EACH,eAAe,EACf,OAAO,EACP,KAAK,EACL,KAAK,EACL,YAAY,CACb,CAAC,IAAI,CAAC,GAAG,EAAE;gBACV,mCAAmC;gBACnC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;oBACrB,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;wBAC3D,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;oBAC3D,CAAC,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,IAAI,EAAE,+CAAU;QAChB,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI;KAC5B,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,UAAU;QAC9B,QAAQ,EAAE,gBAAgB;KAC3B,CAAC,CAAC;IAEH,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,UAAU,EAAE;QAC7C,KAAK,EAAE,mBAAmB;QAC1B,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,MAAM,SAAS,CAAC,GAAG,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC;QACD,IAAI,EAAE,2CAAM;QACZ,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI;QAC3B,SAAS,EAAE,GAAG,EAAE;YACd,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC;YACnC,OAAO,QAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,WAAW,CAAC,SAAS,MAAK,UAAU,CAAC;QAC7D,CAAC;KACF,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,UAAU;QAC9B,QAAQ,EAAE,gBAAgB;KAC3B,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAa,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC3D,MAAM,KAAK,GAAG,KAAK,EAAE,IAAS,EAAE,EAAE;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,GAAG,sDAAS,CAAC,QAAQ,CAAC,CAAC;QAC9B,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC;aAC3D,KAAK,CAAC,wCAAK,CAAC;aACZ,OAAO,CAAC,GAAG,EAAE;YACZ,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,SAAS,EAAE;QAC5C,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,uBAAuB,IAAI,CAAC,QAAQ,EAAE;QACrD,IAAI,EAAE,IAAI,CAAC,EAAE,WAAC,wDAAQ,CAAC,WAAI,CAAC,QAAQ,0CAAE,QAAQ,EAAE,KAAI,SAAS,CAAC;QAC9D,OAAO,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;QAClC,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU;QAClC,SAAS,EAAE,GAAG,EAAE;;YACd,MAAM,OAAO,GAAG,aAAO,CAAC,UAAU,0CAAE,KAAK,CAAC,IAAI,CAAC;YAC/C,OAAO,OAAO,KAAK,UAAU,IAAI,OAAO,KAAK,KAAK,CAAC;QACrD,CAAC;KACF,CAAC,CAAC;IAEH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,SAAS;QAC7B,QAAQ,EAAE,gBAAgB;QAC1B,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;KAC9B,CAAC,CAAC;IAEH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,SAAS;QAC7B,QAAQ,EAAE,gBAAgB;QAC1B,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;KAC9B,CAAC,CAAC;IAEH,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,SAAS,EAAE;QAC5C,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,yBAAyB;QACxC,IAAI,EAAE,iDAAY;QAClB,OAAO,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;;YACpB,MAAM,IAAI,GAAG,OAAO,CAAC,UAAW,CAAC;YACjC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM,EAAE;gBAC9B,MAAM,OAAO,GAAG,8BAA8B,CAAC;gBAC/C,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;aAC1B;YACD,IAAI,IAAI,GAAG,QAAQ,CAAC;YACpB,MAAM,QAAQ,GAAG,UAAI,CAAC,MAAM,0CAAE,KAAK,CAAE,QAAQ,CAAC;YAC9C,IAAI,QAAQ,EAAE;gBACZ,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;aAC7B;YACD,MAAM,IAAI,GAAG,qDAAQ,CAAC,IAAI,CAAC,CAAC;YAC5B,MAAM,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,OAAO,CACnE,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,CACjC,CAAC;QACJ,CAAC;QACD,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU;QAClC,SAAS,EAAE,GAAG,EAAE;;YACd,MAAM,OAAO,GAAG,aAAO,CAAC,UAAU,0CAAE,KAAK,CAAC,IAAI,CAAC;YAC/C,OAAO,OAAO,KAAK,MAAM,CAAC;QAC5B,CAAC;KACF,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,SAAS;QAC7B,QAAQ,EAAE,gBAAgB;KAC3B,CAAC,CAAC;IAEH,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QAC7B,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;QAClC,eAAe,CAAC,GAAG,CAAC,iDAAS,EAAE,iBAAiB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAClE,IAAI,UAAW,CAAC,SAAU,KAAK,KAAK,CAAC,UAAU,EAAE;gBAC/C,eAAe;qBACZ,GAAG,CAAC,iDAAS,EAAE,iBAAiB,EAAE,KAAK,CAAC,UAAU,CAAC;qBACnD,IAAI,CAAC,GAAG,EAAE;oBACT,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;gBAC1C,CAAC,CAAC,CAAC;aACN;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,WAAW,EAAE;QAC9C,KAAK,EAAE,0BAA0B;QACjC,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,KAAK,CAAC,SAAS,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;QACrC,CAAC;QACD,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,SAAS;QAChC,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU;KACnC,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,WAAW;QAC/B,QAAQ,EAAE,gBAAgB;KAC3B,CAAC,CAAC;IACH,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,kDAAU,CAAC,iBAAiB,EAAE;QACpD,KAAK,EAAE,wBAAwB;QAC/B,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,KAAK,CAAC,UAAU,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC;QACvC,CAAC;QACD,SAAS,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU;KAClC,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,CAAC;QACd,OAAO,EAAE,kDAAU,CAAC,iBAAiB;QACrC,QAAQ,EAAE,gBAAgB;KAC3B,CAAC,CAAC;IAEH,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE;QACrB,IAAI,oBAAoB,EAAE;YACxB,oDAAQ,CAAC,eAAe,EAAE,oBAAoB,EAAE,UAAU,CAAC,CAAC;SAC7D;QAED,eAAe,CAAC,GAAG,CAAC,iDAAS,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACzD,MAAM,KAAK,GAAI,KAAK,CAAC,SAAsC,IAAI,EAAE,CAAC;YAClE,KAAK,MAAM,GAAG,IAAI,KAAK,EAAE;gBACvB,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAE,CAAC,QAAQ,EAAE,CAAC;gBACpC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;oBACrC,OAAO,CAAC,OAAO,CAAC;wBACd,OAAO,EAAE,kDAAU,CAAC,SAAS;wBAC7B,QAAQ,EAAE,gBAAgB;wBAC1B,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;qBACzB,CAAC,CAAC;iBACJ;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,KAAK,UAAU,YAAY,CACzB,GAAoB,EACpB,QAA0B,EAC1B,OAAyB,EACzB,KAAY,EACZ,KAAe,EACf,OAA0D;;IAE1D,IAAI;QACF,IAAI,KAAK,CAAC,UAAU,EAAE;YACpB,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;YAC3C,OAAO;SACR;QAED,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;QACxB,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC;QAChC,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,OAAO,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;YACrE,OAAO;SACR;QAED,MAAM,QAAQ,GAAG,aAAO,CAAC,aAAa,0CAAE,OAAO,CAAC;QAChD,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,OAAO,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;YACjE,OAAO;SACR;QAED,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,2DAAmB,EAAE,MAAM,CAAC,CAAC;QAChE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC;QAC9C,kCAAkC;QAClC,IAAI,OAAO,KAAK,IAAI,EAAE;YACpB,MAAM,OAAO,GAAG,sDAAsD;YACtE,4CAAK,CAAC,OAAO,CAAC,CAAC;YACf,OAAO;SACR;QACD,MAAM,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEzC,MAAM,OAAO,GAAG,OAAC,MAAM,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,0CAAE,QAAQ,EAAE,CAAC;QAChE,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,EAAE;YAC7C,MAAM,OAAO,GAAG,iDAAiD,CAAC;YAClE,4CAAK,CAAC,OAAO,CAAC,CAAC;YACf,OAAO;SACR;QAED,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,iDAAS,CAAC,CAAC;QAChD,MAAM,OAAO,GAAe;YAC1B,MAAM,0CAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC/B,GAAG,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC;SACpC,CAAC;QAEF,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC,SAAU,CAAC,QAAQ,EAAE,CAAC;QACxD,MAAM,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,0CAAE,SAAS,0CAAE,QAAQ,EAAE,CAAC;QAEvD,MAAM,OAAO,GAAG,MAAM,2CAAI,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,OAAQ,CAAC,CAAC,KAAK,CACnE,wCAAK,CACN,CAAC;QACF,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/D,MAAM,SAAS,GAAG,IAAI,gEAAiB,EAAE,CAAC;YAC1C,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACjD,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,2DAAmB,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;SACtE;aAAM;YACL,IAAI,OAAO,CAAC,OAAO,KAAK,EAAE,EAAE;gBAC1B,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;gBACrC,OAAO;aACR;YACD,OAAO,CAAC,KAAK,CAAC,yBAAyB,OAAO,EAAE,CAAC,CAAC;YAClD,4CAAK,CACH,6HAA6H,CAC9H,CAAC;YACF,OAAO;SACR;QAED,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;QACzB,QAAQ;aACL,OAAO,CAAC,4BAA4B,CAAC;aACrC,IAAI,CAAC,GAAG,EAAE;YACT,QAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;QACvD,CAAC,CAAC;aACD,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,KAAK,CAAC,UAAU,EAAE;gBACpB,QAAQ,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;oBACvD,QAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;QAEL,MAAM,OAAO,GAAG,QAAQ,CAAC,UAAW,CAAC;QACrC,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC;QAC3C,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACpC,QAAQ,CAAC,WAAW,CAAC,2DAAmB,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;KACzD;YAAS;QACR,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;KAC1B;AACH,CAAC;AAED,SAAS,aAAa,CAAC,OAAe,EAAE,QAAkB;IACxD,QAAQ,OAAO,EAAE;QACf,KAAK,MAAM;YACT,OAAO,EAAE,CAAC;QACZ,KAAK,YAAY,CAAC,CAAC;YACjB,MAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAC;YACtC,IAAI,IAAI,KAAK,SAAS,EAAE;gBACtB,OAAO,EAAE,CAAC;aACX;YACD,IAAI,QAAQ,GAAe,EAAE,CAAC;YAC9B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE;gBACnC,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;gBAC/B,IACE,2DAAmB,IAAI,KAAK,CAAC,QAAQ;oBACrC,KAAK,CAAC,QAAQ,CAAC,2DAAmB,CAAC,KAAK,SAAS,EACjD;oBACA,QAAQ,GAAG,CAAC,GAAG,QAAQ,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC/C;aACF;YACD,OAAO,QAAQ,CAAC;SACjB;QACD,KAAK,YAAY,CAAC,CAAC;YACjB,MAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAC;YACtC,IAAI,QAAQ,GAAe,EAAE,CAAC;YAC9B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE;gBACnC,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;gBAC/B,QAAQ,GAAG,CAAC,GAAG,QAAQ,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC9C,IACE,CAAC,CAAC,2DAAmB,IAAI,KAAK,CAAC,QAAQ,CAAC;oBACxC,KAAK,CAAC,QAAQ,CAAC,2DAAmB,CAAC,KAAK,SAAS,EACjD;oBACA,IAAI,CAAC,QAAQ,CAAC,2DAAmB,CAAC,GAAG,MAAM,CAAC;iBAC7C;aACF;YACD,OAAO,QAAQ,CAAC;SACjB;QACD,KAAK,UAAU,CAAC,CAAC;YACf,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC;YACrC,IAAI,QAAQ,GAAe,EAAE,CAAC;YAC9B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;gBAC3C,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;gBAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;gBAC/B,IACE,CAAC,CAAC,2DAAmB,IAAI,KAAK,CAAC,QAAQ,CAAC;oBACxC,IAAI,CAAC,QAAQ,CAAC,2DAAmB,CAAC,KAAK,SAAS,EAChD;oBACA,IAAI,CAAC,QAAQ,CAAC,2DAAmB,CAAC,GAAG,MAAM,CAAC;iBAC7C;gBACD,QAAQ,GAAG,CAAC,GAAG,QAAQ,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;aAC/C;YACD,OAAO,QAAQ,CAAC;SACjB;KACF;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,SAAS,aAAa,CAAC,IAAgB;IACrC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;IAC/B,IAAI,IAAI,GAAG,MAAM,CAAC;IAClB,IAAI,2DAAmB,IAAI,IAAI,CAAC,QAAQ,EAAE;QACxC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,2DAAmB,CAAE,CAAC,QAAQ,EAAE,CAAC;KAC1D;IACD,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC;IAC3B,IAAI,KAAK,CAAC,SAAS,KAAK,MAAM,EAAE;QAC9B,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACtC;QACD,OAAO,GAAG,SAAS,QAAQ,KAAK,OAAO,UAAU,CAAC;KACnD;IACD,OAAO,IAAI,0CAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACpC,CAAC;AAED,KAAK,UAAU,WAAW,CACxB,OAAyB,EACzB,SAAkB;;IAElB,MAAM,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC;IACvC,IAAI,QAAQ,KAAK,IAAI,EAAE;QACrB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACxC,OAAO;KACR;IACD,MAAM,KAAK,GAAG,QAAS,CAAC,KAAM,CAAC,KAAM,CAAC;IACtC,IAAI,SAAS,EAAE;QACb,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YAC3C,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,2DAAmB,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;gBACpD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW;qBAC1B,WAAW,CAAC,2DAAmB,CAAE;qBACjC,QAAQ,EAAE,CAAC;gBACd,cAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,0CAAE,QAAQ,CAChD,kBAAkB,IAAI,OAAO,CAC9B,CAAC;aACH;SACF;KACF;SAAM;QACL,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YAC3C,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,2DAAmB,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;gBACpD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW;qBAC1B,WAAW,CAAC,2DAAmB,CAAE;qBACjC,QAAQ,EAAE,CAAC;gBACd,cAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,0CAAE,WAAW,CACnD,kBAAkB,IAAI,OAAO,CAC9B,CAAC;aACH;SACF;KACF;AACH,CAAC;AAED,KAAK,UAAU,SAAS,CACtB,GAAoB,EACpB,QAA0B,EAC1B,OAAyB;IAEzB,MAAM,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC;IAClC,IAAI,MAAM,KAAK,IAAI,EAAE;QACnB,OAAO,CAAC,KAAK,CAAC,2DAA2D,CAAC,CAAC;QAC3E,OAAO;KACR;IACD,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC;IAChD,MAAM,QAAQ,GAAG,uDAAW,CAAC,OAAO,CAAC,CAAC;IACtC,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;QAC1B,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YACjE,IAAI,OAAO,CAAC,QAAQ,KAAK,UAAU,EAAE;gBACnC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;aAC1D;QACH,CAAC,CAAC,CAAC;QACH,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC;QAChC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACnD,IAAI,OAAO,CAAC,QAAQ,KAAK,MAAM,EAAE;YAC/B,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;SACnE;KACF;IACD,MAAM,CAAC,QAAQ,EAAE,CAAC;IAClB,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;AACrD,CAAC;AAED;;GAEG;AACH,iEAAe,MAAM,EAAC;AAEtB,SAAS,UAAU,CAAC,IAAY;IAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAC1C,QAAQ,KAAK,EAAE;QACb,KAAK,SAAS;YACZ,OAAO,QAAQ,CAAC;QAClB;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC;;;;;;;;;;;;;;;ACpiBD,MAAe,QAAQ;IAKrB,YAAY,QAAkB,EAAE,QAAgB;QAJxC,WAAM,GAAa,EAAE,CAAC;QAK5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAEM,GAAG,CAAC,IAAY;QACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAIM,MAAM,CAAC,YAAY,CAAC,QAAgB;QACzC,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YACrC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3B;aAAM;YACL,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;SAC9B;IACH,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;CACF;AAED,MAAM,OAAQ,SAAQ,QAAQ;IAG5B,YAAY,IAAwB;QAClC,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAHxB,cAAS,GAAG,KAAK,CAAC;QAIxB,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAChB;IACH,CAAC;IAED,OAAO,CAAC,CAAS;QACf,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;QACtB,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC1B,aAAa;YACb,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACf,OAAO,UAAU,CAAC;aACnB;YACD,cAAc;YACd,IAAI,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE;gBACpC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACf,OAAO,UAAU,CAAC;aACnB;YACD,wBAAwB;YACxB,OAAO,MAAM,CAAC;SACf;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACf,OAAO,UAAU,CAAC;SACnB;IACH,CAAC;CACF;AAED,MAAM,IAAK,SAAQ,QAAQ;IAGzB,YAAY,IAAY;QACtB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACnC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAJlB,SAAI,GAAG,CAAC,CAAC;IAKjB,CAAC;IAED,OAAO,CAAC,IAAY;QAClB,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,KAAK,EAAE;YACzB,mCAAmC;YACnC,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE;gBACnB,OAAO,KAAK,CAAC;aACd;iBAAM;gBACL,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;gBACf,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACf,OAAO,MAAM,CAAC;aACf;SACF;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACf,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;gBAC1B,kCAAkC;gBAClC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;aAChB;YACD,OAAO,MAAM,CAAC;SACf;IACH,CAAC;CACF;AAED,MAAM,cAAc;IAGlB,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;QACE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,GAAG,CAAC,IAAY;QACrB,IAAI,MAAgB,CAAC;QACrB,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/B,MAAM,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACrC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC7B;aAAM;YACL,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACnD,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,KAAK,KAAK,MAAM,CAAC,QAAQ,EAAE;gBAC7B,gBAAgB;gBAChB,IAAI,KAAK,KAAK,KAAK,EAAE;oBACnB,MAAM,GAAG,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC;oBAChC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC7B;qBAAM;oBACL,MAAM,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC7B;aACF;SACF;IACH,CAAC;CACF;AAEM,SAAS,WAAW,CAAC,QAAgB;IAC1C,MAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;IACjC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACnC,KAAK,MAAM,GAAG,IAAI,KAAK,EAAE;QACvB,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACrB;IACD,OAAO,GAAG,CAAC,QAAQ,CAAC;AACtB,CAAC;;;;;;;;;;;;;;;;;;AC9IgD;AAET;AAEjC,MAAM,KAAM,SAAQ,2DAAS;IAMlC,YAAY,gBAAkC;QAC5C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,gBAAgB,CAAC,IAAI,CAAC,iDAAS,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC/C,IAAI,CAAC,UAAU,GAAG,QAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,SAAoB,CAAC;QACvE,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,IAAI,SAAS,CAAC,CAAU;QACtB,IAAI,CAAC,KAAK,IAAI,CAAC,UAAU,EAAE;YACzB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SAC1B;IACH,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,UAAU,CAAC,KAAc;QAC3B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,UAAU,CAAC,KAAc;QAC3B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;;;;;;;;;;;;;;;;;;;AC5CuC;AACA;AAOxC,oDAAoD;AAC7C,SAAS,QAAQ,CACtB,eAAiC,EACjC,YAAmC,EACnC,UAAuB;IAEvB,MAAM,oBAAoB,GAAkB;QAC1C,aAAa,EAAE,KAAK,CAAC,EAAE;YACrB,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;KACF,CAAC;IACF,YAAY,CAAC,WAAW,CAAC,GAAG,iDAAS,SAAS,EAAE,oBAAoB,CAAC,CAAC;IAEtE,6CAA6C;IAC7C,8BAA8B;IAC9B,iDAAiD;IACjD,MAAM;IACN,KAAK;IACL,6EAA6E;AAC/E,CAAC;AAED;;GAEG;AACI,SAAS,kBAAkB,CAAC,KAAiB;IAClD,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;IACzB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC;IAChC,MAAM,QAAQ,GAA+B,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC;IACxE,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAU,CAAC,QAAQ,EAAE,CAAC;IACjE,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,+CAAQ,CAAS,WAAW,CAAC,CAAC;IAE1D,MAAM,eAAe,GAAG,CAAC,CAA6B,EAAE,EAAE;QACxD,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;QAC7B,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnD,SAAS,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC,CAAC;IACF,OAAO,CACL;QACE;YACE,2EAAS,KAAK,CAAU;YACxB,kEAAG,SAAS,EAAC,mBAAmB,IAAE,IAAI,CAAK;YAC3C,oEAAK,GAAG,EAAC,QAAQ,EAAC,SAAS,EAAC,wBAAwB;gBAClD;oBACE;;wBAAM,IAAI;4BAAO;oBACjB,oEAAK,SAAS,EAAC,mBAAmB;wBAChC,yEACE,SAAS,EAAC,cAAc,EACxB,KAAK,EAAE,MAAM,EACb,QAAQ,EAAE,eAAe,GACzB,CACE,CACF,CACF,CACG,CACP,CACP,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,gFAAgF;AAChF,oDAAoD;AACpD,gFAAgF;AAChF,qDAAqD;AACrD,iDAAiD;AACjD,yCAAyC;AACzC,gFAAgF;AAChF,oDAAoD;AACpD,2DAA2D;AAC3D,sCAAsC;AACtC,QAAQ;AACR,MAAM;AACN,EAAE;AACF,aAAa;AACb,mDAAmD;AACnD,0EAA0E;AAC1E,+BAA+B;AAC/B,cAAc;AACd,uCAAuC;AACvC,qDAAqD;AACrD,0DAA0D;AAC1D,iBAAiB;AACjB,WAAW;AACX,uBAAuB;AACvB,oBAAoB;AACpB,uCAAuC;AACvC,mDAAmD;AACnD,4BAA4B;AAC5B,wBAAwB;AACxB,wCAAwC;AACxC,aAAa;AACb,oCAAoC;AACpC,+DAA+D;AAC/D,4CAA4C;AAC5C,uBAAuB;AACvB,2BAA2B;AAC3B,4CAA4C;AAC5C,sDAAsD;AACtD,sEAAsE;AACtE,gFAAgF;AAChF,yEAAyE;AACzE,mEAAmE;AACnE,0DAA0D;AAC1D,mFAAmF;AACnF,8CAA8C;AAC9C,gBAAgB;AAChB,cAAc;AACd,wCAAwC;AACxC,aAAa;AACb,wBAAwB;AACxB,uDAAuD;AACvD,aAAa;AACb,OAAO;AACP,IAAI;;;;;;;;;;;;;;;;;;;;;AC7HmD;AACM;AACP;AAEtD,SAAS,KAAK,CAAC,IAAY;IACzB,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AAChD,CAAC;AAEM,SAAS,YAAY,CAC1B,OAAe,EACf,QAAgB,EAChB,KAAe;IAEf,OAAO,KAAK,EACV,GAAoB,EACpB,OAAyB,EACzB,QAA0B,EAC1B,KAAY,EACZ,KAAe,EACf,IAAY,EACZ,EAAE;;QACF,MAAM,QAAQ,GAAG,aAAO,CAAC,aAAa,0CAAE,OAAO,CAAC;QAChD,MAAM,MAAM,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,UAAU,CAAC;QACpC,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,MAAM,OAAO,GAAG,oDAAoD,CAAC;YACrE,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1B;QACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YACvC,MAAM,OAAO,GAAG,GAAG,OAAO,yBAAyB,KAAK,OAAO,CAAC;YAChE,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1B;QAED,MAAM,IAAI,GAAG,MAAO,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC;QAC9C,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3B,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAEnD,MAAM,OAAO,GAAG,OAAC,MAAM,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,0CAAE,QAAQ,EAAE,CAAC;QAChE,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,EAAE;YAC7C,MAAM,OAAO,GAAG,iDAAiD,CAAC;YAClE,2CAAK,CAAC,OAAO,CAAC,CAAC;YACf,OAAO;SACR;QAED,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,iDAAS,CAAC,CAAC;QAChD,MAAM,OAAO,GAAe,CAAC,MAAM,yCAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC9D,MAAM,OAAO,GAAG,IAAI,yCAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAE5C,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC,SAAU,CAAC,QAAQ,EAAE,CAAC;QACxD,MAAM,GAAG,GAAG,oBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,0CAAE,SAAS,0CAAE,QAAQ,EAAE,CAAC;QAEvD,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;QACxB,MAAM,QAAQ,GAAG,MAAM,0CAAI,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,OAAQ,CAAC,CAAC,KAAK,CACrE,uCAAK,CACN,CAAC;QACF,IAAI,QAAQ,CAAC,OAAO,KAAK,SAAS,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACjE,MAAM,SAAS,GAAG,IAAI,gEAAiB,EAAE,CAAC;YAC1C,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClD,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,2DAAmB,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;SACvE;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,yBAAyB,QAAQ,EAAE,CAAC,CAAC;YACnD,2CAAK,CACH,6HAA6H,CAC9H,CAAC;YACF,OAAO;SACR;QAED,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;QACzB,QAAQ,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YACvD,QAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,QAAS,CAAC,UAAW,CAAC;QACtC,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC;QAC3C,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACrC,QAAQ,CAAC,WAAW,CAAC,2DAAmB,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC,CAAC;AACJ,CAAC;AAEM,SAAS,SAAS,CAAC,IAAY;IACpC,OAAO,YAAY,CACjB,gBAAgB,IAAI,EAAE,EACtB,kBAAkB,IAAI,IAAI;QACxB,2BAA2B,IAAI,IAAI;QACnC,OAAO;QACP,WAAW;QACX,OAAO,EACT,CAAC,UAAU,EAAE,KAAK,CAAC,CACpB,CAAC;AACJ,CAAC;AAEM,SAAS,QAAQ,CAAC,IAAY;IACnC,OAAO,YAAY,CACjB,WAAW,EACX,sBAAsB;QACpB,UAAU,IAAI,qCAAqC;QACnD,OAAO;QACP,WAAW;QACX,OAAO,EACT,CAAC,MAAM,CAAC,CACT,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;AC3GoE;AAKoB;AAC1D;AAKW;AAEuB;AAEjE,SAAS,eAAe,CAAC,KAMxB;IACC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,2CAAc,CAAW,EAAE,CAAC,CAAC;IACzD,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,2CAAc,CAAS,EAAE,CAAC,CAAC;IACrE,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,2CAAc,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAE3E,4CAAe,CAAC,GAAG,EAAE;QACnB,KAAK,UAAU,UAAU;;YACvB,IAAI;gBACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACxD,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,SAAU,CAAC,QAAQ,EAAE,CAAC;gBAClE,MAAM,GAAG,GAAG,cAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,SAAS,0CAAE,QAAQ,EAAE,CAAC;gBACtD,MAAM,SAAS,GAAG,MAAM,gDAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,uCAAK,CAAC,CAAC;gBAC9D,SAAS,CAAC,SAAS,CAAC,CAAC;gBACrB,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACxB,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/B,MAAM,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtD;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;aAChD;QACH,CAAC;QAED,UAAU,EAAE,CAAC;IACf,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,4CAAe,CAAC,GAAG,EAAE;QACnB,MAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC;QAC9C,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;YAC/B,aAAa,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAElB,MAAM,YAAY,GAAG,KAAK,EAAE,KAA2C,EAAE,EAAE;QACzE,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QACjC,MAAM,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAC9C,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,GAAG,EAAE;QAC3B,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC;QAC/B,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAClC,CAAC,CAAC;IAEF,MAAM,qBAAqB,GAAG,GAAG,EAAE;QACjC,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC;QAC/B,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF,MAAM,qBAAqB,GAAG,GAAG,EAAE;QACjC,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC;QAC/B,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF,MAAM,mBAAmB,GAAG,GAAG,EAAE;QAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC;QAC/B,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,OAAO,CACL;QACE,iDAAC,6EAAsB,IACrB,IAAI,EAAE,0CAAM,EACZ,OAAO,EAAE,eAAe,EACxB,OAAO,EAAE,CAAC,UAAU,EACpB,OAAO,EAAC,MAAM,GACU;QAC1B,iDAAC,6EAAsB,IACrB,IAAI,EAAE,0CAAM,EACZ,OAAO,EAAE,qBAAqB,EAC9B,OAAO,EAAE,CAAC,UAAU,EACpB,OAAO,EAAC,sBAAsB,GACN;QAC1B,iDAAC,6EAAsB,IACrB,IAAI,EAAE,0CAAM,EACZ,OAAO,EAAE,qBAAqB,EAC9B,OAAO,EAAE,CAAC,UAAU,EACpB,OAAO,EAAC,sBAAsB,GACN;QAC1B,iDAAC,6EAAsB,IACrB,IAAI,EAAE,0CAAM,EACZ,OAAO,EAAE,mBAAmB,EAC5B,OAAO,EAAE,CAAC,UAAU,EACpB,OAAO,EAAC,oBAAoB,GACJ;QAC1B,iDAAC,6EAAsB,IACrB,IAAI,EAAE,0CAAM,EACZ,OAAO,EAAE,mBAAmB,EAC5B,OAAO,EAAE,CAAC,UAAU,EACpB,OAAO,EAAC,iBAAiB,GACD;QAC1B;YACE,4DAAO,OAAO,EAAC,cAAc,EAAC,SAAS,EAAC,2BAA2B;;gBACnD,GAAG,CACX;YACR,6DACE,EAAE,EAAC,cAAc,EACjB,KAAK,EAAE,aAAa,EACpB,QAAQ,EAAE,YAAY,EACtB,QAAQ,EAAE,UAAU,EACpB,SAAS,EAAC,2BAA2B,IAEpC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CACnB,6DAAQ,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,IAC7B,KAAK,CACC,CACV,CAAC,CACK,CACJ,CACH,CACP,CAAC;AACJ,CAAC;AAED;;GAEG;AACI,MAAM,eACX,SAAQ,kEAAW;IAST,MAAM;QACd,OAAO,CACL,iDAAC,eAAe,IACd,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,IAAI,CAAC,KAAK,GACjB,CACH,CAAC;IACJ,CAAC;IAED,YACE,KAAa,EACb,GAAoB,EACpB,QAA0B,EAC1B,KAAe,EACf,KAAY;QAEZ,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,EAAE,GAAG,gBAAgB,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,SAAS,CACP,KAAoB,EACpB,OAAkD;QAElD,MAAM,MAAM,GAAG,IAAI,eAAe,CAChC,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,KAAK,CACX,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QACnC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QACnC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,8DAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAClE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;QACnD,OAAO,IAAI,kEAAkB,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sources":["webpack://jupyter-litchi/./src/api.ts","webpack://jupyter-litchi/./src/constants.ts","webpack://jupyter-litchi/./src/icons.ts","webpack://jupyter-litchi/./src/index.ts","webpack://jupyter-litchi/./src/markdown.ts","webpack://jupyter-litchi/./src/model.ts","webpack://jupyter-litchi/./src/settings.tsx","webpack://jupyter-litchi/./src/templates.ts","webpack://jupyter-litchi/./src/toolbar.tsx"],"sourcesContent":["// SendRequestComponent.tsx\nimport { showErrorMessage, Dialog } from '@jupyterlab/apputils';\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nexport interface IMessage {\n  role: string;\n  content: string;\n}\n\nexport class Message implements IMessage {\n  role: string;\n  content: string;\n\n  constructor(role: string, content: string) {\n    this.role = role;\n    this.content = content;\n  }\n\n  static async startUp(settings: ISettingRegistry.ISettings): Promise<Message> {\n    const system = settings.get('system').composite!.toString();\n    return new Message('system', system);\n  }\n}\n\nclass ChatRequest {\n  model: string;\n  stream: boolean;\n  messages: Message[];\n\n  constructor(model: string, messages: Message[], stream: boolean = false) {\n    this.model = model;\n    this.stream = stream;\n    this.messages = messages;\n  }\n}\n\nexport async function chat(\n  url: string,\n  key: string | undefined,\n  session: Message[],\n  message: Message,\n  model: string\n): Promise<any> {\n  try {\n    const messages = [...session, message];\n    const request = new ChatRequest(model, messages);\n    const headers = requestHeaders(key);\n\n    console.log(request);\n    const resp = await fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(request)\n    });\n    const data = await resp.json();\n    console.log(data);\n    if (data.message !== undefined) {\n      return data.message;\n    } else if (data.choices !== undefined) {\n      const msgs = data.choices.map((c: { message: any }) => c.message);\n      if (msgs.length > 0) {\n        return msgs[0];\n      }\n    }\n  } catch (error) {\n    console.error('Error sending request to server:', error);\n    throw new Error(\n      'chat failed, maybe server gone or get a invalid response. Please check settings or explorer console if you are a developer'\n    );\n  }\n  console.error('message not success');\n  return { message: '', role: 'assistant' };\n}\n\nexport async function listModels(url: string, key: string | undefined) {\n  const headers = requestHeaders(key);\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: headers\n    });\n    return response\n      .json()\n      .then(data => {\n        if (data.models !== undefined) {\n          return data.models.map((m: { name: any }) => m.name);\n        } else if (data.data !== undefined) {\n          return data.data.map((m: { id: any }) => m.id);\n        } else {\n          console.error(`except data ${JSON.stringify(data, null, 2)}`);\n          throw new Error(\n            `invalid models list from ${url}. Please check the settings or explorer console if you are the developer`\n          );\n        }\n      })\n      .catch(e => {\n        console.error(e);\n        throw new Error(\n          `list models from ${url} failed. Please check the settings or explorer console if you are the developer`\n        );\n      });\n  } catch (error) {\n    console.error(error);\n    throw new Error(\n      `list models from ${url} failed. Please check the settings or explorer console if you are the developer`\n    );\n  }\n}\n\nfunction requestHeaders(key: string | undefined) {\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json'\n  });\n  if (key !== undefined && key.length > 0) {\n    headers.set('Authorization', key);\n  }\n  return headers;\n}\n\nexport async function alert(message: string) {\n  return showErrorMessage('Litchi', message, [Dialog.okButton()]);\n}\n","export const LITCHI_ID = 'jupyter-litchi:jupyter-litchi';\n\nexport namespace CommandIDs {\n  export const CHAT = 'litchi:chat';\n  export const CONTEXTUAL = 'litchi:contextual';\n  export const HISTORICAL = 'litchi:historical';\n  export const SELECTED = 'litchi:selected';\n  export const CONTINUOUS = 'litchi:continuous';\n  export const TOGGLE_ROLE = 'litchi:show-roles-toggle';\n  export const TOGGLE_CONTINUOUS = 'litchi:continuous-toggle';\n  export const SPLIT_CELL = 'litchi:split-cell';\n  export const TRANSLATE = 'litchi:translate';\n  export const UNIT_TEST = 'litchi:unit-test';\n}\n\nexport const LITCHI_MESSAGE_ROLE = 'litchi:message:role';\nexport const LITCHI_TOOLBAR_FACTORY = 'litchi:toolbar-factory';\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nexport const litchiIcon = new LabIcon({\n  name: 'litchi-icon',\n  svgstr:\n    '<svg width=\"200px\" height=\"200px\" viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n    '  <ellipse cx=\"100\" cy=\"100\" rx=\"50\" ry=\"40\" fill=\"#FF6347\" />\\n' +\n    '  <path d=\"M100,60 Q90,20 110,20 Q120,40 100,60\" fill=\"#228B22\" />\\n' +\n    '  <circle cx=\"70\" cy=\"90\" r=\"5\" fill=\"#FFFFFF\" />\\n' +\n    '  <circle cx=\"130\" cy=\"90\" r=\"5\" fill=\"#FFFFFF\" />\\n' +\n    '  <circle cx=\"90\" cy=\"110\" r=\"5\" fill=\"#FFFFFF\" />\\n' +\n    '  <circle cx=\"110\" cy=\"110\" r=\"5\" fill=\"#FFFFFF\" />\\n' +\n    '  <line x1=\"100\" y1=\"140\" x2=\"100\" y2=\"160\" stroke=\"#8B4513\" stroke-width=\"2\" />\\n' +\n    '</svg>'\n});\n\nexport const caIcon = new LabIcon({\n  name: 'litchi-ca',\n  svgstr:\n    '<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n    '    <text x=\"0\" y=\"10\" font-family=\"Arial\" font-size=\"10\" fill=\"black\">CA</text>\\n' +\n    '</svg>'\n});\nexport const chIcon = new LabIcon({\n  name: 'litchi-ch',\n  svgstr:\n    '<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n    '    <text x=\"0\" y=\"10\" font-family=\"Arial\" font-size=\"10\" fill=\"black\">CH</text>\\n' +\n    '</svg>'\n});\nexport const csIcon = new LabIcon({\n  name: 'litchi-cs',\n  svgstr:\n    '<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n    '    <text x=\"0\" y=\"10\" font-family=\"Arial\" font-size=\"10\" fill=\"black\">CS</text>\\n' +\n    '</svg>'\n});\nexport const ctIcon = new LabIcon({\n  name: 'litchi-ct',\n  svgstr:\n    '<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n    '    <text x=\"0\" y=\"10\" font-family=\"Arial\" font-size=\"10\" fill=\"black\">CT</text>\\n' +\n    '</svg>'\n});\n\nexport const ccIcon = new LabIcon({\n  name: 'litchi-cc',\n  svgstr:\n    '<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n    '    <text x=\"0\" y=\"10\" font-family=\"Arial\" font-size=\"10\" fill=\"black\">CC</text>\\n' +\n    '</svg>'\n});\n\nexport const scIcon = new LabIcon({\n  name: 'litchi-sc',\n  svgstr:\n    '<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n    '    <text x=\"0\" y=\"10\" font-family=\"Arial\" font-size=\"10\" fill=\"black\">SC</text>\\n' +\n    '</svg>'\n});\n\nfunction capitalizeFirstLetter(input: string): string {\n  if (input.length === 0) {\n    return input;\n  }\n  if (input.length === 1) {\n    return input.charAt(0).toUpperCase();\n  }\n  return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n}\n\nfunction getLanguageAbbreviation(countryName: string): string {\n  const countryAbbreviations: { [key: string]: string } = {\n    Chinese: 'Ch',\n    English: 'En',\n    French: 'Fr',\n    German: 'De'\n  };\n\n  return (\n    countryAbbreviations[countryName] || capitalizeFirstLetter(countryName)\n  );\n}\n\nexport const langIcon = (lang: string) => {\n  const name = getLanguageAbbreviation(lang);\n  return new LabIcon({\n    name: `litchi-${name}`,\n    svgstr:\n      '<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n      `    <text x=\"0\" y=\"10\" font-family=\"Arial\" font-size=\"10\" fill=\"black\">${name}</text>\\n` +\n      '</svg>'\n  });\n};\n\nexport const unitTestIcon = new LabIcon({\n  name: 'litchi-unit-test',\n  svgstr:\n    '<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n' +\n    '    <text x=\"0\" y=\"10\" font-family=\"Arial\" font-size=\"10\" fill=\"black\">UT</text>\\n' +\n    '</svg>'\n});\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ICommandPalette, IToolbarWidgetRegistry } from '@jupyterlab/apputils';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { alert, chat, IMessage, Message } from './api';\nimport { MarkdownCellModel } from '@jupyterlab/cells';\nimport { INotebookTracker, Notebook } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { WidgetExtension } from './toolbar';\nimport { ICellModel } from '@jupyterlab/cells';\nimport { Model } from './model';\nimport { ITranslator } from '@jupyterlab/translation';\n\nimport { LITCHI_ID, CommandIDs, LITCHI_MESSAGE_ROLE } from './constants';\nimport { IFormRendererRegistry } from '@jupyterlab/ui-components';\nimport { renderer } from './settings';\nimport { chIcon, csIcon, caIcon, ctIcon, langIcon, unitTestIcon, litchiIcon, scIcon } from './icons';\nimport { translate, unitTest } from './templates';\nimport { ReadonlyPartialJSONArray } from '@lumino/coreutils';\nimport { to_segments } from './markdown';\n\n/**\n * The plugin registration information.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: LITCHI_ID,\n  description: 'Add a widget to the notebook header.',\n  autoStart: true,\n  activate: activate,\n  optional: [IFormRendererRegistry],\n  requires: [\n    ICommandPalette,\n    INotebookTracker,\n    ISettingRegistry,\n    IToolbarWidgetRegistry,\n    ITranslator,\n    IStateDB\n  ]\n};\n\nexport async function activate(\n  app: JupyterFrontEnd,\n  palette: ICommandPalette,\n  tracker: INotebookTracker,\n  settingRegistry: ISettingRegistry,\n  toolbarRegistry: IToolbarWidgetRegistry,\n  translator: ITranslator,\n  state: IStateDB,\n  formRendererRegistry: IFormRendererRegistry | null\n) {\n  const model = new Model(settingRegistry);\n\n  const widget = new WidgetExtension(\n    LITCHI_ID,\n    app,\n    settingRegistry,\n    state,\n    model\n  );\n\n  app.docRegistry.addWidgetExtension('Notebook', widget);\n\n  app.commands.addCommand(CommandIDs.CHAT, {\n    label: 'Litchi Chat',\n    execute: async () => {\n      await chatActivate(app, settingRegistry, tracker, model, state, 'chat');\n    },\n    icon: caIcon,\n    isEnabled: () => model.idle\n  });\n  palette.addItem({ command: CommandIDs.CHAT, category: 'jupyter-Litchi' });\n\n  app.commands.addCommand(CommandIDs.CONTEXTUAL, {\n    label: 'Litchi Chat Contextual',\n    execute: async () => {\n      await chatActivate(\n        app,\n        settingRegistry,\n        tracker,\n        model,\n        state,\n        'contextual'\n      );\n    },\n    icon: ctIcon,\n    isEnabled: () => model.idle\n  });\n  palette.addItem({\n    command: CommandIDs.CONTEXTUAL,\n    category: 'jupyter-Litchi'\n  });\n\n  app.commands.addCommand(CommandIDs.HISTORICAL, {\n    label: 'Litchi Chat Historical',\n    execute: async () => {\n      await chatActivate(\n        app,\n        settingRegistry,\n        tracker,\n        model,\n        state,\n        'historical'\n      );\n    },\n    icon: chIcon,\n    isEnabled: () => model.idle\n  });\n  palette.addItem({\n    command: CommandIDs.HISTORICAL,\n    category: 'jupyter-Litchi'\n  });\n\n  app.commands.addCommand(CommandIDs.SELECTED, {\n    label: 'Litchi Chat Selected',\n    execute: async () => {\n      await chatActivate(\n        app,\n        settingRegistry,\n        tracker,\n        model,\n        state,\n        'selected'\n      );\n    },\n    icon: csIcon,\n    isEnabled: () => model.idle\n  });\n  palette.addItem({\n    command: CommandIDs.SELECTED,\n    category: 'jupyter-Litchi'\n  });\n\n  app.commands.addCommand(CommandIDs.CONTINUOUS, {\n    label: 'Litchi Chat Continuous',\n    execute: async () => {\n      await chatActivate(\n        app,\n        settingRegistry,\n        tracker,\n        model,\n        state,\n        'historical'\n      ).then(() => {\n        // markup if not in continuous mode\n        if (!model.continuous) {\n          app.commands.execute('notebook:insert-cell-below').then(() => {\n            app.commands.execute('notebook:change-cell-to-markdown');\n          });\n        }\n      });\n    },\n    icon: litchiIcon,\n    isEnabled: () => model.idle\n  });\n  palette.addItem({\n    command: CommandIDs.CONTINUOUS,\n    category: 'jupyter-Litchi'\n  });\n\n  app.commands.addCommand(CommandIDs.SPLIT_CELL, {\n    label: 'Litchi Split Cell',\n    execute: async () => {\n      await splitCell(app, settingRegistry, tracker);\n    },\n    icon: scIcon,\n    isEnabled: () => model.idle,\n    isVisible: () => {\n      const current = tracker.activeCell;\n      return current?.model.sharedModel.cell_type === 'markdown';\n    }\n  });\n  palette.addItem({\n    command: CommandIDs.SPLIT_CELL,\n    category: 'jupyter-Litchi'\n  });\n\n  const default_languages: string[] = ['Chinese', 'English'];\n  const trans = async (args: any) => {\n    const language = args.language.toString();\n    const t = translate(language);\n    await t(app, tracker, settingRegistry, model, state, language)\n      .catch(alert)\n      .finally(() => {\n        model.processing = false;\n      });\n  };\n\n  app.commands.addCommand(CommandIDs.TRANSLATE, {\n    label: args => `Litchi Translate To ${args.language}`,\n    icon: args => langIcon(args.language?.toString() || 'Unknown'),\n    execute: async args => trans(args),\n    isEnabled: () => !model.processing,\n    isVisible: () => {\n      const doctype = tracker.activeCell?.model.type;\n      return doctype === 'markdown' || doctype === 'raw';\n    }\n  });\n\n  palette.addItem({\n    command: CommandIDs.TRANSLATE,\n    category: 'jupyter-Litchi',\n    args: { language: 'English' }\n  });\n\n  palette.addItem({\n    command: CommandIDs.TRANSLATE,\n    category: 'jupyter-Litchi',\n    args: { language: 'Chinese' }\n  });\n\n  app.commands.addCommand(CommandIDs.UNIT_TEST, {\n    label: args => 'Litchi Create Unit Test',\n    icon: unitTestIcon,\n    execute: async args => {\n      const cell = tracker.activeCell!;\n      if (cell.model.type !== 'code') {\n        const message = 'Unit Test only for Code Cell';\n        console.error(message);\n        throw new Error(message);\n      }\n      let lang = 'Python';\n      const mimeType = cell.editor?.model!.mimeType;\n      if (mimeType) {\n        lang = langInMime(mimeType);\n      }\n      const func = unitTest(lang);\n      await func(app, tracker, settingRegistry, model, state, lang).finally(\n        () => (model.processing = false)\n      );\n    },\n    isEnabled: () => !model.processing,\n    isVisible: () => {\n      const doctype = tracker.activeCell?.model.type;\n      return doctype === 'code';\n    }\n  });\n  palette.addItem({\n    command: CommandIDs.UNIT_TEST,\n    category: 'jupyter-Litchi'\n  });\n\n  model.stateChanged.connect(w => {\n    refreshPage(tracker, w.showRoles);\n    settingRegistry.get(LITCHI_ID, 'continuous-mode').then(continuous => {\n      if (continuous!.composite! !== model.continuous) {\n        settingRegistry\n          .set(LITCHI_ID, 'continuous-mode', model.continuous)\n          .then(() => {\n            console.log('Continuous mode changed.');\n          });\n      }\n    });\n  });\n  app.commands.addCommand(CommandIDs.TOGGLE_ROLE, {\n    label: 'Litchi Show Roles Toggle',\n    execute: async () => {\n      model.showRoles = !model.showRoles;\n    },\n    isToggled: () => model.showRoles,\n    isEnabled: () => !model.processing\n  });\n  palette.addItem({\n    command: CommandIDs.TOGGLE_ROLE,\n    category: 'jupyter-Litchi'\n  });\n  app.commands.addCommand(CommandIDs.TOGGLE_CONTINUOUS, {\n    label: 'Litchi Continuous Mode',\n    execute: async () => {\n      model.continuous = !model.continuous;\n    },\n    isToggled: () => model.continuous\n  });\n  palette.addItem({\n    command: CommandIDs.TOGGLE_CONTINUOUS,\n    category: 'jupyter-Litchi'\n  });\n\n  app.restored.then(() => {\n    if (formRendererRegistry) {\n      renderer(settingRegistry, formRendererRegistry, translator);\n    }\n\n    settingRegistry.get(LITCHI_ID, 'translators').then(trans => {\n      const items = (trans.composite as ReadonlyPartialJSONArray) || [];\n      for (const idx in items) {\n        const lang = items[idx]!.toString();\n        if (!default_languages.includes(lang)) {\n          palette.addItem({\n            command: CommandIDs.TRANSLATE,\n            category: 'jupyter-Litchi',\n            args: { language: lang }\n          });\n        }\n      }\n    });\n  });\n}\n\nasync function chatActivate(\n  app: JupyterFrontEnd,\n  registry: ISettingRegistry,\n  tracker: INotebookTracker,\n  model: Model,\n  state: IStateDB,\n  subTask: 'chat' | 'contextual' | 'historical' | 'selected'\n) {\n  try {\n    if (model.processing) {\n      console.log('an other process is running');\n      return;\n    }\n\n    model.processing = true;\n    const cell = tracker.activeCell;\n    if (cell === null) {\n      console.error('litchi:chat exit because any cell not been selected');\n      return;\n    }\n\n    const notebook = tracker.currentWidget?.content;\n    if (notebook === undefined) {\n      console.error('litchi:chat exit because the notebook not found');\n      return;\n    }\n\n    cell.model.sharedModel.setMetadata(LITCHI_MESSAGE_ROLE, 'user');\n    const content = cell.model.sharedModel.source;\n    // eslint-disable-next-line eqeqeq\n    if (content === null) {\n      const message = 'litchi:chat exit because the content of cell is null'\n      alert(message);\n      return;\n    }\n    const latest = cellToMessage(cell.model);\n\n    const aiModel = (await state.fetch('litchi:model'))?.toString();\n    if (aiModel === null || aiModel === undefined) {\n      const message = 'litchi:chat exit because not any model selected';\n      alert(message);\n      return;\n    }\n\n    const settings = await registry.load(LITCHI_ID);\n    const session: IMessage[] = [\n      await Message.startUp(settings),\n      ...createContext(subTask, notebook)\n    ];\n\n    const url = settings.get('chat')!.composite!.toString();\n    const key = settings.get('key')?.composite?.toString();\n\n    const message = await chat(url, key, session, latest, aiModel!).catch(\n      alert\n    );\n    if (message.content !== undefined && message.content.length > 0) {\n      const cellModel = new MarkdownCellModel();\n      cellModel.sharedModel.setSource(message.content);\n      cellModel.sharedModel.setMetadata(LITCHI_MESSAGE_ROLE, message.role);\n    } else {\n      if (message.content === '') {\n        console.log('ignored empty message');\n        return;\n      }\n      console.error(`get a invalid message ${message}`);\n      alert(\n        'Message is invalid. Please check the settings and the model selected. Or check the explorer console if you are a developer.'\n      );\n      return;\n    }\n\n    const { commands } = app;\n    commands\n      .execute('notebook:insert-cell-below')\n      .then(() => {\n        commands.execute('notebook:change-cell-to-markdown');\n      })\n      .then(() => {\n        if (model.continuous) {\n          commands.execute('notebook:insert-cell-below').then(() => {\n            commands.execute('notebook:change-cell-to-markdown');\n          });\n        }\n      });\n\n    const newCell = notebook.activeCell!;\n    const newModel = newCell.model.sharedModel;\n    newModel.setSource(message.content);\n    newModel.setMetadata(LITCHI_MESSAGE_ROLE, message.role);\n  } finally {\n    model.processing = false;\n  }\n}\n\nfunction createContext(command: string, notebook: Notebook): IMessage[] {\n  switch (command) {\n    case 'chat':\n      return [];\n    case 'contextual': {\n      const stop = notebook.activeCellIndex;\n      if (stop === undefined) {\n        return [];\n      }\n      let messages: IMessage[] = [];\n      for (let idx = 0; idx < stop; idx++) {\n        const cell = notebook.model!.cells.get(idx);\n        const model = cell.sharedModel;\n        if (\n          LITCHI_MESSAGE_ROLE in model.metadata &&\n          model.metadata[LITCHI_MESSAGE_ROLE] !== undefined\n        ) {\n          messages = [...messages, cellToMessage(cell)];\n        }\n      }\n      return messages;\n    }\n    case 'historical': {\n      const stop = notebook.activeCellIndex;\n      let messages: IMessage[] = [];\n      for (let idx = 0; idx < stop; idx++) {\n        const cell = notebook.model!.cells.get(idx);\n        const model = cell.sharedModel;\n        messages = [...messages, cellToMessage(cell)];\n        if (\n          !(LITCHI_MESSAGE_ROLE in model.metadata) ||\n          model.metadata[LITCHI_MESSAGE_ROLE] === undefined\n        ) {\n          cell.metadata[LITCHI_MESSAGE_ROLE] = 'user';\n        }\n      }\n      return messages;\n    }\n    case 'selected': {\n      const cells = notebook.selectedCells;\n      let messages: IMessage[] = [];\n      for (let idx = 0; idx < cells.length; idx++) {\n        const cell = cells[idx].model;\n        const model = cell.sharedModel;\n        if (\n          !(LITCHI_MESSAGE_ROLE in model.metadata) ||\n          cell.metadata[LITCHI_MESSAGE_ROLE] === undefined\n        ) {\n          cell.metadata[LITCHI_MESSAGE_ROLE] = 'user';\n        }\n        messages = [...messages, cellToMessage(cell)];\n      }\n      return messages;\n    }\n  }\n  return [];\n}\n\nfunction cellToMessage(cell: ICellModel): IMessage {\n  const model = cell.sharedModel;\n  let role = 'user';\n  if (LITCHI_MESSAGE_ROLE in cell.metadata) {\n    role = cell.getMetadata(LITCHI_MESSAGE_ROLE)!.toString();\n  }\n  let content = model.source;\n  if (model.cell_type === 'code') {\n    let language = '';\n    const tokens = cell.mimeType.split('-');\n    if (tokens.length > 1) {\n      language = tokens[tokens.length - 1];\n    }\n    content = `\\`\\`\\`${language}\\n${content}\\n\\`\\`\\``;\n  }\n  return new Message(role, content);\n}\n\nasync function refreshPage(\n  tracker: INotebookTracker,\n  showRoles: boolean\n): Promise<void> {\n  const notebook = tracker.currentWidget;\n  if (notebook === null) {\n    console.log('no notebook was selected');\n    return;\n  }\n  const cells = notebook!.model!.cells!;\n  if (showRoles) {\n    for (let idx = 0; idx < cells.length; idx++) {\n      const cell = cells.get(idx);\n      if (LITCHI_MESSAGE_ROLE in cell.sharedModel.metadata) {\n        const role = cell.sharedModel\n          .getMetadata(LITCHI_MESSAGE_ROLE)!\n          .toString();\n        notebook?.content.widgets[idx].inputArea?.addClass(\n          `jp-litchi-role-${role}-Cell`\n        );\n      }\n    }\n  } else {\n    for (let idx = 0; idx < cells.length; idx++) {\n      const cell = cells.get(idx);\n      if (LITCHI_MESSAGE_ROLE in cell.sharedModel.metadata) {\n        const role = cell.sharedModel\n          .getMetadata(LITCHI_MESSAGE_ROLE)!\n          .toString();\n        notebook?.content.widgets[idx].inputArea?.removeClass(\n          `jp-litchi-role-${role}-Cell`\n        );\n      }\n    }\n  }\n}\n\nasync function splitCell(\n  app: JupyterFrontEnd,\n  registry: ISettingRegistry,\n  tracker: INotebookTracker\n) {\n  const origin = tracker.activeCell;\n  if (origin === null) {\n    console.error('litchi:split-cell exit because any cell not been selected');\n    return;\n  }\n  const content = origin.model.sharedModel.source;\n  const segments = to_segments(content);\n  for (const idx in segments) {\n    const segment = segments[idx];\n    await app.commands.execute('notebook:insert-cell-below').then(() => {\n      if (segment.category === 'markdown') {\n        app.commands.execute('notebook:change-cell-to-markdown');\n      }\n    });\n    const cell = tracker.activeCell;\n    cell?.model.sharedModel.setSource(segment.content);\n    if (segment.category === 'code') {\n      cell?.model.sharedModel.setMetadata('language', segment.language);\n    }\n  }\n  origin.activate();\n  await app.commands.execute('notebook:delete-cell');\n}\n\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n\nfunction langInMime(mime: string) {\n  const token = mime.replace('text/x-', '');\n  switch (token) {\n    case 'ipython':\n      return 'python';\n    default:\n      return token;\n  }\n}\n","type Category = 'markdown' | 'code' | 'mermaid';\n\nabstract class Fragment {\n  private _lines: string[] = [];\n  private _category: Category;\n  private _language: string;\n\n  constructor(category: Category, language: string) {\n    this._category = category;\n    this._language = language;\n  }\n\n  public add(line: string) {\n    this._lines.push(line);\n  }\n\n  get category(): string {\n    return this._category;\n  }\n\n  get language(): string {\n    return this._language;\n  }\n\n  public abstract tryLine(line: string): Category | 'end';\n\n  public static createByHead(headline: string): Fragment {\n    if (headline.trim().startsWith('```')) {\n      return new Code(headline);\n    } else {\n      return new Segment(headline);\n    }\n  }\n\n  get content() {\n    return this._lines.join('\\n');\n  }\n}\n\nclass Segment extends Fragment {\n  private inMermaid = false;\n\n  constructor(head: string | undefined) {\n    super('markdown', 'markdown');\n    if (head !== undefined) {\n      this.add(head);\n    }\n  }\n\n  tryLine(l: string): Category {\n    const line = l.trim();\n    if (line.startsWith('```')) {\n      // in mermaid\n      if (line.startsWith('```mermaid') && !this.inMermaid) {\n        this.inMermaid = true;\n        this.add(line);\n        return 'markdown';\n      }\n      // out mermaid\n      if (line === '```' && this.inMermaid) {\n        this.inMermaid = false;\n        this.add(line);\n        return 'markdown';\n      }\n      // else redirect to code\n      return 'code';\n    } else {\n      this.add(line);\n      return 'markdown';\n    }\n  }\n}\n\nclass Code extends Fragment {\n  private deep = 0;\n\n  constructor(head: string) {\n    const language = head.substring(3);\n    super('code', language);\n  }\n\n  tryLine(line: string): Category | 'end' {\n    if (line.trim() === '```') {\n      // popup recursive code block stack\n      if (this.deep === 0) {\n        return 'end';\n      } else {\n        this.deep -= 1;\n        this.add(line);\n        return 'code';\n      }\n    } else {\n      this.add(line);\n      if (line.startsWith('```')) {\n        // push recursive code block stack\n        this.deep += 1;\n      }\n      return 'code';\n    }\n  }\n}\n\nclass LitchiDocument {\n  private readonly _segments: Fragment[];\n\n  get segments(): Fragment[] {\n    return this._segments;\n  }\n\n  constructor() {\n    this._segments = [];\n  }\n\n  public add(line: string) {\n    let latest: Fragment;\n    if (this._segments.length === 0) {\n      latest = Fragment.createByHead(line);\n      this._segments.push(latest);\n    } else {\n      latest = this._segments[this._segments.length - 1];\n      const tryIt = latest.tryLine(line);\n      if (tryIt !== latest.category) {\n        // skip try line\n        if (tryIt === 'end') {\n          latest = new Segment(undefined);\n          this._segments.push(latest);\n        } else {\n          latest = Fragment.createByHead(line);\n          this._segments.push(latest);\n        }\n      }\n    }\n  }\n}\n\nexport function to_segments(markdown: string) {\n  const doc = new LitchiDocument();\n  const lines = markdown.split('\\n');\n  for (const idx in lines) {\n    doc.add(lines[idx]);\n  }\n  return doc.segments;\n}\n","import { VDomModel } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { LITCHI_ID } from './constants';\n\nexport class Model extends VDomModel {\n  private _showRoles: boolean;\n  private _processing: boolean;\n  private _idle: boolean;\n  private _continuous: boolean;\n\n  constructor(settingsRegistry: ISettingRegistry) {\n    super();\n    this._showRoles = false;\n    this._processing = false;\n    this._idle = true;\n    settingsRegistry.load(LITCHI_ID).then(settings => {\n      this.continuous = settings!.get('talking-mode').composite as boolean;\n    });\n    this._continuous = false;\n  }\n\n  get showRoles(): boolean {\n    return this._showRoles;\n  }\n  set showRoles(v: boolean) {\n    if (v !== this._showRoles) {\n      this._showRoles = v;\n      this.stateChanged.emit();\n    }\n  }\n\n  get continuous(): boolean {\n    return this._continuous;\n  }\n\n  set continuous(value: boolean) {\n    this._continuous = value;\n  }\n\n  get processing(): boolean {\n    return this._processing;\n  }\n\n  set processing(value: boolean) {\n    this._processing = value;\n    this.stateChanged.emit();\n  }\n\n  get idle() {\n    return this._idle;\n  }\n}\n","import { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport {\n  IFormRenderer,\n//  FormComponent,\n  IFormRendererRegistry\n} from '@jupyterlab/ui-components';\nimport type { FieldProps } from '@rjsf/utils';\nimport React, { useState } from 'react';\nimport { LITCHI_ID } from './constants';\n// import { EditorExtensionRegistry } from '@jupyterlab/codemirror';\n// import { JSONExt, ReadonlyJSONValue } from '@lumino/coreutils';\nimport {\n  ITranslator,\n  // nullTranslator\n} from '@jupyterlab/translation';\n// import validatorAjv8 from '@rjsf/validator-ajv8';\nexport function renderer(\n  settingRegistry: ISettingRegistry,\n  formRegistry: IFormRendererRegistry,\n  translator: ITranslator\n) {\n  const systemPromptRenderer: IFormRenderer = {\n    fieldRenderer: props => {\n      return renderSystemPrompt(props);\n    }\n  };\n  formRegistry.addRenderer(`${LITCHI_ID}.system`, systemPromptRenderer);\n\n  // const providersRenderer: IFormRenderer = {\n  //   fieldRenderer: props => {\n  //     return renderProviders(translator, props);\n  //   }\n  // };\n  // formRegistry.addRenderer(`${LITCHI_ID}.providers.[*]`, providersRenderer);\n}\n\n/**\n * System Prompt renderer.\n */\nexport function renderSystemPrompt(props: FieldProps) {\n  const { schema } = props;\n  const title = schema.title;\n  const desc = schema.description;\n  const settings: ISettingRegistry.ISettings = props.formContext.settings;\n  const settingData = settings.get('system').composite!.toString();\n  const [system, setSystem] = useState<string>(settingData);\n\n  const onSettingChange = (e: { target: { value: any } }) => {\n    const value = e.target.value;\n    settings.set('system', value).catch(console.error);\n    setSystem(value);\n  };\n  return (\n    <div>\n      <fieldset>\n        <legend>{title}</legend>\n        <p className=\"field-description\">{desc}</p>\n        <div key=\"system\" className=\"form-group large-field\">\n          <div>\n            <h3> {desc} </h3>\n            <div className=\"inputFieldWrapper\">\n              <textarea\n                className=\"form-control\"\n                value={system}\n                onChange={onSettingChange}\n              />\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </div>\n  );\n}\n\n/**\n * Providers Settings renderer.\n */\n// export function renderProviders(translator: ITranslator, props: FieldProps) {\n//   const registry = new EditorExtensionRegistry();\n//   const properties = React.useMemo(() => registry.settingsSchema, []) as any;\n//   const defaultFormData: Record<string, any> = {};\n//   console.log('init providers settings page');\n//   // Only provide customizable options\n//   for (const [key, value] of Object.entries(registry.defaultConfiguration)) {\n//     if (typeof properties[key] !== 'undefined') {\n//       console.log(`property \"${key}\" load as ${value}`);\n//       defaultFormData[key] = value;\n//     }\n//   }\n//\n//   return (\n//     <div className=\"jp-FormGroup-contentNormal\">\n//       <h3 className=\"jp-FormGroup-fieldLabel jp-FormGroup-contentItem\">\n//         {props.schema.title}\n//       </h3>\n//       {props.schema.description && (\n//         <div className=\"jp-FormGroup-description\">\n//           This is a provider {props.schema.description}\n//         </div>\n//       )}\n//       <FormComponent\n//         schema={{\n//           title: props.schema.title,\n//           description: props.schema.description,\n//           type: 'object',\n//           properties,\n//           additionalProperties: false\n//         }}\n//         validator={validatorAjv8}\n//         formData={{ ...defaultFormData, ...props.formData }}\n//         formContext={{ defaultFormData }}\n//         liveValidate\n//         onChange={e => {\n//           // Only save non-default values\n//           console.log('provider settings changed');\n//           const nonDefault: Record<string, ReadonlyJSONValue> = {};\n//           for (const [property, value] of Object.entries(e.formData ?? {})) {\n//             console.log(`property \"${property}\" changed to ${value}`);\n//             alert(`property \"${property}\" changed to ${value}`);\n//             const default_ = defaultFormData[property];\n//             if (default_ === undefined || !JSONExt.deepEqual(value, default_)) {\n//               nonDefault[property] = value;\n//             }\n//           }\n//           props.onChange(nonDefault);\n//         }}\n//         tagName=\"div\"\n//         translator={translator ?? nullTranslator} />\n//     </div>\n//   );\n// }\n","import { JupyterFrontEnd } from '@jupyterlab/application';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { Model } from './model';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { alert, chat, IMessage, Message } from './api';\nimport { LITCHI_ID, LITCHI_MESSAGE_ROLE } from './constants';\nimport { MarkdownCellModel } from '@jupyterlab/cells';\n\nfunction quote(text: string): string {\n  return text.replace(/^('```')/g, '\\\\`\\\\`\\\\`');\n}\n\nexport function chat_by_cell(\n  jobName: string,\n  template: string,\n  types: string[]\n) {\n  return async (\n    app: JupyterFrontEnd,\n    tracker: INotebookTracker,\n    registry: ISettingRegistry,\n    model: Model,\n    state: IStateDB,\n    dest: string\n  ) => {\n    const notebook = tracker.currentWidget?.content;\n    const source = notebook?.activeCell;\n    if (source === null) {\n      const message = 'Translate command need a markdown cell is selected';\n      console.error(message);\n      throw new Error(message);\n    }\n    if (!types.includes(source!.model.type)) {\n      const message = `${jobName} command only support ${types} cell`;\n      console.error(message);\n      throw new Error(message);\n    }\n\n    const text = source!.model.sharedModel.source;\n    const quoted = quote(text);\n    const prompt = template.replace('${text}', quoted);\n\n    const aiModel = (await state.fetch('litchi:model'))?.toString();\n    if (aiModel === null || aiModel === undefined) {\n      const message = 'litchi:chat exit because not any model selected';\n      alert(message);\n      return;\n    }\n\n    const settings = await registry.load(LITCHI_ID);\n    const session: IMessage[] = [await Message.startUp(settings)];\n    const request = new Message('user', prompt);\n\n    const url = settings.get('chat')!.composite!.toString();\n    const key = settings.get('key')?.composite?.toString();\n\n    model.processing = true;\n    const response = await chat(url, key, session, request, aiModel!).catch(\n      alert\n    );\n    if (response.content !== undefined && response.content.length > 0) {\n      const cellModel = new MarkdownCellModel();\n      cellModel.sharedModel.setSource(response.content);\n      cellModel.sharedModel.setMetadata(LITCHI_MESSAGE_ROLE, response.role);\n    } else {\n      console.error(`get a invalid message ${response}`);\n      alert(\n        'Message is invalid. Please check the settings and the model selected. Or check the explorer console if you are a developer.'\n      );\n      return;\n    }\n\n    const { commands } = app;\n    commands.execute('notebook:insert-cell-below').then(() => {\n      commands.execute('notebook:change-cell-to-markdown');\n    });\n\n    const newCell = notebook!.activeCell!;\n    const newModel = newCell.model.sharedModel;\n    newModel.setSource(response.content);\n    newModel.setMetadata(LITCHI_MESSAGE_ROLE, response.role);\n  };\n}\n\nexport function translate(lang: string) {\n  return chat_by_cell(\n    `Translate To ${lang}`,\n    `# Translate To ${lang}\\n` +\n      `Translate text below to ${lang}\\n` +\n      '```\\n' +\n      '${text}\\n' +\n      '```\\n',\n    ['markdown', 'raw']\n  );\n}\n\nexport function unitTest(lang: string) {\n  return chat_by_cell(\n    'Unit Test',\n    '# Create Unit Test\\n' +\n      `Create ${lang} Unit Test for the code below to \\n` +\n      '```\\n' +\n      '${text}\\n' +\n      '```\\n',\n    ['code']\n  );\n}\n","import { IDisposable, DisposableDelegate } from '@lumino/disposable';\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport { NotebookPanel, INotebookModel } from '@jupyterlab/notebook';\nimport { ReactWidget, ToolbarButtonComponent, Toolbar } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { JupyterFrontEnd } from '@jupyterlab/application';\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { alert, listModels } from './api';\nimport { Model } from './model';\nimport { caIcon, chIcon, ccIcon, csIcon, ctIcon } from \"./icons\";\n\nfunction ModelsComponent(props: {\n  appId: string;\n  app: JupyterFrontEnd;\n  registry: ISettingRegistry;\n  state: IStateDB;\n  model: Model;\n}) {\n  const [models, setModels] = React.useState<string[]>([]);\n  const [selectedModel, setSelectedModel] = React.useState<string>('');\n  const [processing, setProcessing] = React.useState(props.model.processing);\n\n  React.useEffect(() => {\n    async function loadModels() {\n      try {\n        const settings = await props.registry.load(props.appId);\n        const baseUrl = settings.get('list-models').composite!.toString();\n        const key = settings.get('key').composite?.toString();\n        const modelList = await listModels(baseUrl, key).catch(alert);\n        setModels(modelList);\n        if (modelList.length > 0) {\n          setSelectedModel(modelList[0]);\n          await props.state.save('litchi:model', modelList[0]);\n        }\n      } catch (error) {\n        console.error('Error fetching models:', error);\n      }\n    }\n\n    loadModels();\n  }, []);\n\n  React.useEffect(() => {\n    const stateChanged = props.model.stateChanged;\n    stateChanged.connect((m, args) => {\n      setProcessing(m.processing);\n    });\n  }, [props.model]);\n\n  const handleChange = async (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const model = event.target.value;\n    await props.state.save('litchi:model', model);\n    setSelectedModel(model);\n  };\n\n  const handleChatClick = () => {\n    const { commands } = props.app;\n    commands.execute('litchi:chat');\n  };\n\n  const handleContextualClick = () => {\n    const { commands } = props.app;\n    commands.execute('litchi:contextual');\n  };\n\n  const handleHistoricalClick = () => {\n    const { commands } = props.app;\n    commands.execute('litchi:historical');\n  };\n\n  const handleSelectedClick = () => {\n    const { commands } = props.app;\n    commands.execute('litchi:selected');\n  };\n\n  return (\n    <div>\n      <ToolbarButtonComponent\n        icon={caIcon}\n        onClick={handleChatClick}\n        enabled={!processing}\n        tooltip=\"Chat\"\n      ></ToolbarButtonComponent>\n      <ToolbarButtonComponent\n        icon={chIcon}\n        onClick={handleHistoricalClick}\n        enabled={!processing}\n        tooltip=\"Chat With Historical\"\n      ></ToolbarButtonComponent>\n      <ToolbarButtonComponent\n        icon={ctIcon}\n        onClick={handleContextualClick}\n        enabled={!processing}\n        tooltip=\"Chat With Contextual\"\n      ></ToolbarButtonComponent>\n      <ToolbarButtonComponent\n        icon={csIcon}\n        onClick={handleSelectedClick}\n        enabled={!processing}\n        tooltip=\"Chat With Selected\"\n      ></ToolbarButtonComponent>\n      <ToolbarButtonComponent\n        icon={ccIcon}\n        onClick={handleSelectedClick}\n        enabled={!processing}\n        tooltip=\"Chat Continuous\"\n      ></ToolbarButtonComponent>\n      <span>\n        <label htmlFor=\"model-select\" className=\"jp-ToolbarButtonComponent\">\n          Select Model:{' '}\n        </label>\n        <select\n          id=\"model-select\"\n          value={selectedModel}\n          onChange={handleChange}\n          disabled={processing}\n          className=\"jp-ToolbarButtonComponent\"\n        >\n          {models.map(model => (\n            <option key={model} value={model}>\n              {model}\n            </option>\n          ))}\n        </select>\n      </span>\n    </div>\n  );\n}\n\n/**\n * A notebook widget extension that adds a widget in the notebook header (widget below the toolbar).\n */\nexport class WidgetExtension\n  extends ReactWidget\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel>\n{\n  private readonly state: IStateDB;\n  private readonly app: JupyterFrontEnd;\n  private readonly registry: ISettingRegistry;\n  private readonly appId: string;\n  public readonly model: Model;\n\n  protected render() {\n    return (\n      <ModelsComponent\n        app={this.app}\n        state={this.state}\n        registry={this.registry}\n        appId={this.appId}\n        model={this.model}\n      />\n    );\n  }\n\n  constructor(\n    appId: string,\n    app: JupyterFrontEnd,\n    registry: ISettingRegistry,\n    state: IStateDB,\n    model: Model\n  ) {\n    super();\n    this.state = state;\n    this.app = app;\n    this.registry = registry;\n    this.appId = appId;\n    this.model = model;\n    this.id = 'litchi-toolbar';\n  }\n\n  /**\n   * Create a new extension object.\n   */\n  createNew(\n    panel: NotebookPanel,\n    context: DocumentRegistry.IContext<INotebookModel>\n  ): IDisposable {\n    const widget = new WidgetExtension(\n      this.appId,\n      this.app,\n      this.registry,\n      this.state,\n      this.model\n    );\n    widget.addClass('jp-DefaultStyle');\n    this.addClass('jp-litchi-toolbar');\n    panel.toolbar.addItem('litchi:space', Toolbar.createSpacerItem());\n    panel.toolbar.addItem('litchi:model-list', widget);\n    return new DisposableDelegate(() => {\n      this.dispose();\n    });\n  }\n}\n"],"names":[],"sourceRoot":""}